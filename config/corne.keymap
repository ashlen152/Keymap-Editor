/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { /delete-property/ ignore-modifiers; };

/ {
    macros {
        shift: with_lshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
        };

        caps-word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q         &kp W        &kp E              &kp R            &kp T        &kp Y    &kp U             &kp I               &kp O        &kp P                    &kp MINUS
&kp ESCAPE  &hml LCTRL A  &hml LGUI S  &hml LEFT_SHIFT D  &hml LEFT_ALT F  &kp G        &kp H    &hmr RIGHT_ALT J  &hmr RIGHT_SHIFT K  &hmr RCMD L  &hmr RIGHT_CONTROL SEMI  &kp SQT
&kp GRAVE   &kp Z         &kp X        &kp C              &kp V            &kp B        &kp N    &kp M             &kp COMMA           &kp DOT      &kp FSLH                 &kp EQUAL
                                       &kp LGUI           &mo 1            &kp SPACE    &kp RET  &mo 2             &hmr DEL BACKSPACE
            >;
        };

        symbols_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp AMPS    &kp LESS_THAN         &kp EQUAL     &kp GREATER_THAN       &kp PIPE   &kp HASH
&trans  &none   &none   &none   &none   &none     &kp LBKT    &kp LEFT_PARENTHESIS  &kp COLON     &kp RIGHT_PARENTHESIS  &kp RBKT   &kp PERCENT
&trans  &trans  &trans  &trans  &trans  &trans    &kp DOLLAR  &kp LEFT_BRACE        &kp ASTERISK  &kp RIGHT_BRACE        &kp CARET  &kp EXCLAMATION
                        &trans  &trans  &trans    &kp LS(AT)  &kp SPACE             &kp RALT
            >;
        };

        number_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1    &kp N2    &kp N3        &kp N4                 &kp N5       &trans    &trans        &trans    &trans     &trans  &trans
&kp RET    &kp N6    &kp N7    &kp N8        &kp N9                 &kp N0       &kp LEFT  &kp UP_ARROW  &kp DOWN  &kp RIGHT  &trans  &trans
&kp EQUAL  &kp LPAR  &kp PLUS  &kp UNDER     &kp RPAR               &kp DOT      &trans    &trans        &trans    &trans     &trans  &trans
                               &kp K_COFFEE  &hml DELETE BACKSPACE  &kp SPACE    &kp RET   &trans        &kp RALT
            >;
        };

        BOTH {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 1
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        autoshift {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I   &kp O   &kp P   &trans
&trans  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K   &kp L   &trans  &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &trans  &trans  &trans  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
